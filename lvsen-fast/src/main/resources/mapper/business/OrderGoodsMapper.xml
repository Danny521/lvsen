<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lvsen.modules.business.mapper.OrderGoodsMapper" >
  <resultMap id="BaseResultMap" type="com.lvsen.modules.business.pojo.OrderGoods" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="goods_id" property="goodsId" jdbcType="INTEGER" />
    <result column="sort" property="sort" jdbcType="INTEGER" />
    <result column="goods_unit_id" property="goodsUnitId" jdbcType="INTEGER" />
    <result column="spec" property="spec" jdbcType="VARCHAR" />
    <result column="total_number" property="totalNumber" jdbcType="INTEGER" />
    <result column="real_number" property="realNumber" jdbcType="INTEGER" />
    <result column="unit_tranfer" property="unitTranfer" jdbcType="VARCHAR" />
    <result column="discount" property="discount" jdbcType="REAL" />
    <result column="sum" property="sum" jdbcType="REAL" />
    <result column="discount_price" property="discountPrice" jdbcType="REAL" />
    <result column="discount_sum" property="discountSum" jdbcType="REAL" />
    <result column="is_largess" property="isLargess" jdbcType="VARCHAR" />
    <result column="storage_id" property="storageId" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, order_id, goods_id, sort, goods_unit_id, spec, total_number, real_number, unit_tranfer, 
    discount, sum, discount_price, discount_sum, is_largess, storage_id, remark
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lvsen.modules.business.pojo.OrderGoodsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from order_goods
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from order_goods
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lvsen.modules.business.pojo.OrderGoodsExample" >
    delete from order_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lvsen.modules.business.pojo.OrderGoods" useGeneratedKeys="true" keyProperty="id" >
    insert into order_goods (order_id, goods_id, sort, 
      goods_unit_id, spec, total_number, 
      real_number, unit_tranfer, discount, 
      sum, discount_price, discount_sum, 
      is_largess, storage_id, remark
      )
    values (#{orderId,jdbcType=BIGINT}, #{goodsId,jdbcType=INTEGER}, #{sort,jdbcType=INTEGER}, 
      #{goodsUnitId,jdbcType=INTEGER}, #{spec,jdbcType=VARCHAR}, #{totalNumber,jdbcType=INTEGER}, 
      #{realNumber,jdbcType=INTEGER}, #{unitTranfer,jdbcType=VARCHAR}, #{discount,jdbcType=REAL}, 
      #{sum,jdbcType=REAL}, #{discountPrice,jdbcType=REAL}, #{discountSum,jdbcType=REAL}, 
      #{isLargess,jdbcType=VARCHAR}, #{storageId,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lvsen.modules.business.pojo.OrderGoods" useGeneratedKeys="true" keyProperty="id" >
    insert into order_goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="goodsUnitId != null" >
        goods_unit_id,
      </if>
      <if test="spec != null" >
        spec,
      </if>
      <if test="totalNumber != null" >
        total_number,
      </if>
      <if test="realNumber != null" >
        real_number,
      </if>
      <if test="unitTranfer != null" >
        unit_tranfer,
      </if>
      <if test="discount != null" >
        discount,
      </if>
      <if test="sum != null" >
        sum,
      </if>
      <if test="discountPrice != null" >
        discount_price,
      </if>
      <if test="discountSum != null" >
        discount_sum,
      </if>
      <if test="isLargess != null" >
        is_largess,
      </if>
      <if test="storageId != null" >
        storage_id,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="goodsUnitId != null" >
        #{goodsUnitId,jdbcType=INTEGER},
      </if>
      <if test="spec != null" >
        #{spec,jdbcType=VARCHAR},
      </if>
      <if test="totalNumber != null" >
        #{totalNumber,jdbcType=INTEGER},
      </if>
      <if test="realNumber != null" >
        #{realNumber,jdbcType=INTEGER},
      </if>
      <if test="unitTranfer != null" >
        #{unitTranfer,jdbcType=VARCHAR},
      </if>
      <if test="discount != null" >
        #{discount,jdbcType=REAL},
      </if>
      <if test="sum != null" >
        #{sum,jdbcType=REAL},
      </if>
      <if test="discountPrice != null" >
        #{discountPrice,jdbcType=REAL},
      </if>
      <if test="discountSum != null" >
        #{discountSum,jdbcType=REAL},
      </if>
      <if test="isLargess != null" >
        #{isLargess,jdbcType=VARCHAR},
      </if>
      <if test="storageId != null" >
        #{storageId,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lvsen.modules.business.pojo.OrderGoodsExample" resultType="java.lang.Integer" >
    select count(*) from order_goods
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update order_goods
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.goodsId != null" >
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.sort != null" >
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.goodsUnitId != null" >
        goods_unit_id = #{record.goodsUnitId,jdbcType=INTEGER},
      </if>
      <if test="record.spec != null" >
        spec = #{record.spec,jdbcType=VARCHAR},
      </if>
      <if test="record.totalNumber != null" >
        total_number = #{record.totalNumber,jdbcType=INTEGER},
      </if>
      <if test="record.realNumber != null" >
        real_number = #{record.realNumber,jdbcType=INTEGER},
      </if>
      <if test="record.unitTranfer != null" >
        unit_tranfer = #{record.unitTranfer,jdbcType=VARCHAR},
      </if>
      <if test="record.discount != null" >
        discount = #{record.discount,jdbcType=REAL},
      </if>
      <if test="record.sum != null" >
        sum = #{record.sum,jdbcType=REAL},
      </if>
      <if test="record.discountPrice != null" >
        discount_price = #{record.discountPrice,jdbcType=REAL},
      </if>
      <if test="record.discountSum != null" >
        discount_sum = #{record.discountSum,jdbcType=REAL},
      </if>
      <if test="record.isLargess != null" >
        is_largess = #{record.isLargess,jdbcType=VARCHAR},
      </if>
      <if test="record.storageId != null" >
        storage_id = #{record.storageId,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update order_goods
    set id = #{record.id,jdbcType=BIGINT},
      order_id = #{record.orderId,jdbcType=BIGINT},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      sort = #{record.sort,jdbcType=INTEGER},
      goods_unit_id = #{record.goodsUnitId,jdbcType=INTEGER},
      spec = #{record.spec,jdbcType=VARCHAR},
      total_number = #{record.totalNumber,jdbcType=INTEGER},
      real_number = #{record.realNumber,jdbcType=INTEGER},
      unit_tranfer = #{record.unitTranfer,jdbcType=VARCHAR},
      discount = #{record.discount,jdbcType=REAL},
      sum = #{record.sum,jdbcType=REAL},
      discount_price = #{record.discountPrice,jdbcType=REAL},
      discount_sum = #{record.discountSum,jdbcType=REAL},
      is_largess = #{record.isLargess,jdbcType=VARCHAR},
      storage_id = #{record.storageId,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lvsen.modules.business.pojo.OrderGoods" >
    update order_goods
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="goodsId != null" >
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="goodsUnitId != null" >
        goods_unit_id = #{goodsUnitId,jdbcType=INTEGER},
      </if>
      <if test="spec != null" >
        spec = #{spec,jdbcType=VARCHAR},
      </if>
      <if test="totalNumber != null" >
        total_number = #{totalNumber,jdbcType=INTEGER},
      </if>
      <if test="realNumber != null" >
        real_number = #{realNumber,jdbcType=INTEGER},
      </if>
      <if test="unitTranfer != null" >
        unit_tranfer = #{unitTranfer,jdbcType=VARCHAR},
      </if>
      <if test="discount != null" >
        discount = #{discount,jdbcType=REAL},
      </if>
      <if test="sum != null" >
        sum = #{sum,jdbcType=REAL},
      </if>
      <if test="discountPrice != null" >
        discount_price = #{discountPrice,jdbcType=REAL},
      </if>
      <if test="discountSum != null" >
        discount_sum = #{discountSum,jdbcType=REAL},
      </if>
      <if test="isLargess != null" >
        is_largess = #{isLargess,jdbcType=VARCHAR},
      </if>
      <if test="storageId != null" >
        storage_id = #{storageId,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lvsen.modules.business.pojo.OrderGoods" >
    update order_goods
    set order_id = #{orderId,jdbcType=BIGINT},
      goods_id = #{goodsId,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      goods_unit_id = #{goodsUnitId,jdbcType=INTEGER},
      spec = #{spec,jdbcType=VARCHAR},
      total_number = #{totalNumber,jdbcType=INTEGER},
      real_number = #{realNumber,jdbcType=INTEGER},
      unit_tranfer = #{unitTranfer,jdbcType=VARCHAR},
      discount = #{discount,jdbcType=REAL},
      sum = #{sum,jdbcType=REAL},
      discount_price = #{discountPrice,jdbcType=REAL},
      discount_sum = #{discountSum,jdbcType=REAL},
      is_largess = #{isLargess,jdbcType=VARCHAR},
      storage_id = #{storageId,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>